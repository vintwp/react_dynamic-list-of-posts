{"version":3,"sources":["utils/fetchClient.ts","types/Notification.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Sidebar/Sidebar.tsx","components/PostItem/PostItem.tsx","components/PostsList/PostsList.tsx","components/UserSelector/UserSelector.tsx","components/NotificationMessage/NotificationMessage.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","NotificationType","client","Loader","className","REMOVE_SPACES_PATTERN","NewCommentForm","postId","onAddComment","useState","nameField","setNameField","isNameError","setIsNameError","emailField","setEmailField","isEmailError","setIsEmailError","textField","setTextField","isTextError","setIsTextError","isAddingPost","setIsAddingPost","onSubmit","event","preventDefault","areEmptyFields","newComment","name","email","finally","htmlFor","type","id","placeholder","cn","value","onChange","e","target","replace","onClick","PostDetails","post","comments","hasError","isLoading","onDeleteComment","title","isFormShown","setIsFormShown","useEffect","length","map","comment","href","Sidebar","selectedPost","setComments","isLoadingComments","setIsLoadingComments","setHasError","errorTimer","setErrorTimer","getComments","requestPath","a","receivedComments","urlGetCommentById","clearInterval","timer","nComment","currentComments","commentId","deletingCommentUrl","filter","catch","MemoSidebar","React","memo","PostItem","handlerOpenComments","openedPostId","PostsList","posts","onSelectPost","setOpenedPostId","currentOpened","UserSelector","users","selectedUser","onUserSelect","dropdownActive","setDropdownActive","role","user","index","handlerSelectUser","MemoUserSelector","NotificationMessage","typeNotification","text","dataCypress","App","setUsers","setPosts","setSelectedUser","setSelectedPost","setIsLoading","isError","setIsError","notificationData","setNotificationData","getUsers","process","usersList","slice","Error","useCallback","userSelected","handlerLoadedPosts","receivedPosts","errorMessageData","danger","warning","getPosts","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c77bc603.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum NotificationType {\n  'danger',\n  'warning',\n}\n\nexport interface Notification {\n  typeNotification: NotificationType;\n  text: string;\n  dataCypress?: string;\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  postId: number;\n  onAddComment: (comment: Omit<Comment, 'id'>) => Promise<void>;\n};\n\nconst REMOVE_SPACES_PATTERN = /^\\s+|\\s+$|\\s+(?=\\s)/g;\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, onAddComment }) => {\n  const [nameField, setNameField] = useState<string>('');\n  const [isNameError, setIsNameError] = useState<boolean>(false);\n\n  const [emailField, setEmailField] = useState<string>('');\n  const [isEmailError, setIsEmailError] = useState<boolean>(false);\n\n  const [textField, setTextField] = useState<string>('');\n  const [isTextError, setIsTextError] = useState<boolean>(false);\n\n  const [isAddingPost, setIsAddingPost] = useState<boolean>(false);\n\n  const handlerClearFormFields = () => {\n    setNameField('');\n    setIsNameError(false);\n    setEmailField('');\n    setIsEmailError(false);\n    setTextField('');\n    setIsTextError(false);\n  };\n\n  const handlerChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (isNameError) {\n      setIsNameError(false);\n    }\n\n    setNameField(e.target.value.replace(REMOVE_SPACES_PATTERN, ' '));\n  };\n\n  const handlerChangeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (isEmailError) {\n      setIsEmailError(false);\n    }\n\n    setEmailField(e.target.value);\n  };\n\n  const handlerChangeTextArea = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (isTextError) {\n      setIsTextError(false);\n    }\n\n    setTextField(e.target.value.replace(REMOVE_SPACES_PATTERN, ' '));\n  };\n\n  const handlerSubmitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n    let areEmptyFields = false;\n\n    if (!nameField) {\n      setIsNameError(true);\n      areEmptyFields = true;\n    }\n\n    if (!emailField) {\n      setIsEmailError(true);\n      areEmptyFields = true;\n    }\n\n    if (!textField) {\n      setIsTextError(true);\n      areEmptyFields = true;\n    }\n\n    if (areEmptyFields) {\n      return;\n    }\n\n    const newComment: Omit<Comment, 'id'> = {\n      postId,\n      name: nameField,\n      email: emailField,\n      body: textField,\n    };\n\n    setIsAddingPost(true);\n\n    onAddComment(newComment)\n      .finally(() => {\n        setTextField('');\n        setIsAddingPost(false);\n      });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handlerSubmitForm}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': isNameError })}\n            value={nameField}\n            onChange={handlerChangeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': isEmailError })}\n            value={emailField}\n            onChange={handlerChangeEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('input', { 'is-danger': isTextError })}\n            value={textField}\n            onChange={handlerChangeTextArea}\n          />\n        </div>\n\n        {isTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isAddingPost },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handlerClearFormFields}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  post: Post;\n  comments: Comment[];\n  hasError: boolean;\n  isLoading: boolean;\n  onDeleteComment: (commentId: number) => void;\n  onAddComment: (comment: Omit<Comment, 'id'>) => Promise<void>;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  comments,\n  hasError,\n  isLoading,\n  onDeleteComment,\n  onAddComment,\n}) => {\n  const { id, title, body } = post;\n  const [isFormShown, setIsFormShown]\n    = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsFormShown(false);\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {hasError && !isLoading && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments.length && !isLoading && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!!comments.length && !isLoading && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => onDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!hasError\n            && !isLoading\n            && !isFormShown\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setIsFormShown(true)}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n\n        {isFormShown && (\n          <NewCommentForm\n            postId={id}\n            onAddComment={onAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { client } from '../../utils/fetchClient';\nimport { PostDetails } from '../PostDetails';\n\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  selectedPost: Post | null;\n};\n\nconst COMMENTS_BY_POST = '/comments?postId=';\nconst COMMENTS_DELETE_BY_ID = '/comments/';\n\nconst Sidebar: React.FC<Props> = ({ selectedPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsLoadingComments] = useState<boolean>(false);\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [errorTimer, setErrorTimer]\n    = useState<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    const getComments = async (requestPath: string) => {\n      try {\n        const receivedComments\n          = await client.get<Comment[]>(requestPath);\n\n        setComments(receivedComments);\n      } catch {\n        setHasError(true);\n        setComments([]);\n      } finally {\n        setIsLoadingComments(false);\n      }\n    };\n\n    if (selectedPost) {\n      const urlGetCommentById = COMMENTS_BY_POST + selectedPost.id;\n\n      setIsLoadingComments(true);\n\n      getComments(urlGetCommentById);\n    }\n  }, [selectedPost]);\n\n  useEffect(() => {\n    if (errorTimer) {\n      clearInterval(errorTimer);\n    }\n\n    const timer: ReturnType<typeof setTimeout>\n      = setTimeout(() => setHasError(false), 3000);\n\n    setErrorTimer(timer);\n  }, [hasError]);\n\n  const onDeleteComment = (commentId: number) => {\n    const deletingCommentUrl = COMMENTS_DELETE_BY_ID + commentId;\n\n    setComments(currentComments => {\n      return currentComments.filter(comment => comment.id !== commentId);\n    });\n\n    client.delete(deletingCommentUrl)\n      .catch(() => {\n        setComments(comments);\n        setHasError(true);\n      });\n  };\n\n  const onAddComment = async (nComment: Omit<Comment, 'id'>) => {\n    try {\n      const newComment = await client.post<Comment>('/comments', nComment);\n\n      setComments(currentComments => [...currentComments, newComment]);\n    } catch {\n      setHasError(true);\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={cn(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        { 'Sidebar--open': selectedPost },\n      )}\n    >\n      <div className=\"tile is-child box is-success \">\n        {selectedPost && (\n          <PostDetails\n            post={selectedPost}\n            comments={comments}\n            hasError={hasError}\n            isLoading={isLoadingComments}\n            onDeleteComment={onDeleteComment}\n            onAddComment={onAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const MemoSidebar = React.memo(Sidebar);\n","import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  post: Post;\n  handlerOpenComments: (post: Post) => void;\n  openedPostId: number;\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  handlerOpenComments,\n  openedPostId,\n}) => {\n  const { id, title } = post;\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn(\n            'button',\n            'is-link',\n            { 'is-light': openedPostId !== id },\n          )}\n          onClick={() => handlerOpenComments(post)}\n        >\n          {openedPostId === id ? 'Close' : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useState } from 'react';\nimport { Post } from '../../types/Post';\nimport { PostItem } from '../PostItem';\n\ntype Props = {\n  posts: Post[];\n  onSelectPost: (selectedPost: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelectPost,\n}) => {\n  const [openedPostId, setOpenedPostId] = useState<number>(0);\n\n  const handlerOpenComments = (selectedPost: Post) => {\n    setOpenedPostId(currentOpened => {\n      return currentOpened === selectedPost.id ? 0 : selectedPost.id;\n    });\n    onSelectPost(selectedPost);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostItem\n              key={post.id}\n              post={post}\n              handlerOpenComments={handlerOpenComments}\n              openedPostId={openedPostId}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  onUserSelect: (user: User) => void;\n};\n\nconst UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onUserSelect,\n}) => {\n  const [dropdownActive, setDropdownActive] = useState<boolean>(false);\n\n  const openDropdown = () => {\n    setDropdownActive(true);\n  };\n\n  const handlerSelectUser = (user: User) => {\n    if (user.id !== selectedUser?.id) {\n      onUserSelect(user);\n    }\n\n    setDropdownActive(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn(\n        'dropdown',\n        { 'is-active': dropdownActive },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={openDropdown}\n        >\n          <span>\n            {\n              selectedUser ? (\n                selectedUser.name\n              ) : (\n                'Choose a user'\n              )\n            }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user, index) => (\n            <a\n              key={user.id}\n              href={`#user-${index + 1}`}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': selectedUser?.id === user.id },\n              )}\n              onClick={() => handlerSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const MemoUserSelector = React.memo(UserSelector);\n","/* eslint-disable no-lone-blocks */\nimport React from 'react';\nimport cn from 'classnames';\n\nimport { Notification } from '../../types/Notification';\n\ntype Props = {\n  data: Notification;\n};\n\nexport const NotificationMessage: React.FC<Props> = ({\n  data: {\n    typeNotification,\n    text,\n    dataCypress,\n  },\n}) => (\n  <div\n    className={cn(\n      'notification',\n      {\n        'is-warning': typeNotification,\n        'is-danger': typeNotification,\n      },\n    )}\n    data-cy={dataCypress}\n  >\n    {text}\n  </div>\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { MemoSidebar } from './components/Sidebar';\nimport { PostsList } from './components/PostsList';\nimport { MemoUserSelector } from './components/UserSelector';\nimport { NotificationMessage } from './components/NotificationMessage';\nimport { Loader } from './components/Loader';\n\nimport { client } from './utils/fetchClient';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Notification, NotificationType } from './types/Notification';\n\nif (!process.env.REACT_APP_URL_USERS) {\n  throw new Error('Users Key in not defined');\n}\n\nif (!process.env.REACT_APP_POSTS_BY_USER) {\n  throw new Error('User posts in not defined');\n}\n\nconst URL_GET_USERS = process.env.REACT_APP_URL_USERS;\nconst URL_GET_POSTS = process.env.REACT_APP_POSTS_BY_USER;\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(true);\n  const [notificationData, setNotificationData]\n    = useState<Notification | null>(null);\n\n  useEffect(() => {\n    const getUsers = async () => {\n      try {\n        const usersList = await client.get<User[]>(URL_GET_USERS);\n\n        setUsers(usersList.slice(0, 25));\n      } catch {\n        throw new Error('Something wrong');\n      }\n    };\n\n    getUsers();\n  }, []);\n\n  const onUserSelect = useCallback((userSelected: User) => {\n    setSelectedUser(userSelected);\n    setSelectedPost(null);\n  }, []);\n\n  const handlerLoadedPosts = (receivedPosts: Post[], hasError = false) => {\n    if (hasError) {\n      const errorMessageData: Notification = {\n        typeNotification: NotificationType.danger,\n        text: 'Error loading posts',\n        dataCypress: 'PostsLoadingError',\n      };\n\n      setIsError(true);\n      setNotificationData(errorMessageData);\n\n      return;\n    }\n\n    if (!receivedPosts.length && !hasError) {\n      const errorMessageData: Notification = {\n        typeNotification: NotificationType.warning,\n        text: 'No posts yet',\n        dataCypress: 'NoPostsYet',\n      };\n\n      setIsError(true);\n      setNotificationData(errorMessageData);\n\n      return;\n    }\n\n    setIsError(false);\n    setPosts(receivedPosts);\n  };\n\n  useEffect(() => {\n    const getPosts = async (userId: number) => {\n      try {\n        const receivedPosts\n          = await client.get<Post[]>(URL_GET_POSTS + userId);\n\n        handlerLoadedPosts(receivedPosts, false);\n      } catch {\n        handlerLoadedPosts(posts, true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (selectedUser) {\n      setIsError(false);\n      setIsLoading(true);\n\n      getPosts(selectedUser.id);\n    }\n  }, [selectedUser]);\n\n  const onSelectPost = (post: Post) => {\n    if (selectedPost && selectedPost.id === post.id) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSelectedPost(post);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <MemoUserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onUserSelect={onUserSelect}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {isError && notificationData && (\n                  <NotificationMessage\n                    data={notificationData}\n                  />\n                )}\n\n                {posts.length > 0 && !isError && !isLoading && (\n                  <PostsList\n                    posts={posts}\n                    onSelectPost={onSelectPost}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <MemoSidebar\n            selectedPost={selectedPost}\n          />\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}